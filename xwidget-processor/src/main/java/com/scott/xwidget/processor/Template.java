package com.scott.xwidget.processor;

class Template {
    public static StringBuilder template = new StringBuilder();
    static {
        template.append("package com.scott.xwidget.template;\n");
        template.append("\n");
        template.append("import android.content.Context;\n");
        template.append("import android.content.res.ColorStateList;\n");
        template.append("import android.content.res.TypedArray;\n");
        template.append("import android.graphics.Color;\n");
        template.append("import android.graphics.drawable.Drawable;\n");
        template.append("import android.graphics.drawable.RippleDrawable;\n");
        template.append("import android.util.AttributeSet;\n");
        template.append("\n");
        template.append("import com.scott.xwidget.IWidgetParser;\n");
        template.append("import com.scott.xwidget.R;\n");
        template.append("import com.scott.xwidget.drawable.DrawableInfo;\n");
        template.append("import com.scott.xwidget.drawable.GradientDrawableDecorator;\n");
        template.append("import com.scott.xwidget.drawable.RippleDrawableDecorator;\n");
        template.append("import com.scott.xwidget.drawable.StateListDrawableDecorator;\n");
        template.append("\n");
        template.append("import org.jetbrains.annotations.NotNull;\n");
        template.append("import org.jetbrains.annotations.Nullable;\n");
        template.append("\n");
        template.append("\n");
        template.append("public class XViewParserTemplate implements IWidgetParser {\n");
        template.append("    public XViewParserTemplate() {\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    @Nullable\n");
        template.append("    @Override\n");
        template.append("    public Drawable parseDrawable(@NotNull Context context, @Nullable AttributeSet attrs, @Nullable Drawable drawable) {\n");
        template.append("        TypedArray arr = context.getResources().obtainAttributes(attrs, R.styleable.XViewTemplate);\n");
        template.append("\n");
        template.append("        int type = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_state, 0);\n");
        template.append("\n");
        template.append("        // 如果不是selector, 并且 normalDrawable != null, 则显示normalDrawable\n");
        template.append("        Drawable normalDrawable = arr.getDrawable(R.styleable.XViewTemplate_XViewTemplate_drawable);\n");
        template.append("        if (type == 0 && normalDrawable != null)\n");
        template.append("            return normalDrawable;\n");
        template.append("\n");
        template.append("        Drawable stateDrawable = arr.getDrawable(R.styleable.XViewTemplate_XViewTemplate_stated_drawable);\n");
        template.append("        // 如果是selector 并且 normal 和 state 都不为 null, 则返回 selector\n");
        template.append("        if (normalDrawable != null && stateDrawable != null) {\n");
        template.append("            return new StateListDrawableDecorator(type, normalDrawable, stateDrawable);\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        boolean rippleEnable = arr.getBoolean(R.styleable.XViewTemplate_XViewTemplate_ripple_enable, false);\n");
        template.append("        int rippleColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_ripple_color, 0);\n");
        template.append("\n");
        template.append("        DrawableInfo mNormal = fromNormalTypeArray(arr);\n");
        template.append("        mNormal.state = type;\n");
        template.append("        mNormal.rippleEnable = rippleEnable;\n");
        template.append("        mNormal.rippleColor = rippleColor;\n");
        template.append("\n");
        template.append("        if (type == 0) {\n");
        template.append("            if (rippleEnable) {\n");
        template.append("                return new RippleDrawableDecorator(ColorStateList.valueOf(rippleColor), new GradientDrawableDecorator(mNormal), null, mNormal);\n");
        template.append("            } else {\n");
        template.append("                return new GradientDrawableDecorator(mNormal);\n");
        template.append("            }\n");
        template.append("        }\n");
        template.append("\n");
        template.append("        // 默认所有属性copy自normal, 只修改差异化部分\n");
        template.append("        DrawableInfo mStated = fromStatedTypeArray(arr);\n");
        template.append("        mStated.merge(mNormal);\n");
        template.append("        mStated.state = type;\n");
        template.append("\n");
        template.append("        normalDrawable = new GradientDrawableDecorator(mNormal);\n");
        template.append("        stateDrawable = new GradientDrawableDecorator(mStated);\n");
        template.append("\n");
        template.append("        arr.recycle();\n");
        template.append("        if (!rippleEnable) {\n");
        template.append("            return new StateListDrawableDecorator(type, normalDrawable, stateDrawable);\n");
        template.append("        } else {\n");
        template.append("            return new RippleDrawableDecorator(ColorStateList.valueOf(rippleColor), new StateListDrawableDecorator(type, normalDrawable, stateDrawable), null, mNormal);\n");
        template.append("        }\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    public DrawableInfo fromNormalTypeArray(TypedArray arr) {\n");
        template.append("        DrawableInfo drawableInfo = new DrawableInfo();\n");
        template.append("\n");
        template.append("        // 填充色\n");
        template.append("        drawableInfo.solidColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_solid_color, Color.TRANSPARENT);\n");
        template.append("        // 角度\n");
        template.append("        drawableInfo.corner = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_corner, 0F);\n");
        template.append("        // 描边的宽度\n");
        template.append("        drawableInfo.strokeBorderWith = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stroke_border, 0F);\n");
        template.append("        // 描边颜色\n");
        template.append("        drawableInfo.strokeBorderColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stroke_color, Color.TRANSPARENT);\n");
        template.append("        // 渐变填充的角度\n");
        template.append("        drawableInfo.gradientRadius = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_gradient_radius, 0F);\n");
        template.append("        // 渐变开始颜色\n");
        template.append("        drawableInfo.gradientStartColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_gradient_start_color, Color.TRANSPARENT);\n");
        template.append("        drawableInfo.gradientCenterColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_gradient_center_color, Color.TRANSPARENT);\n");
        template.append("        drawableInfo.gradientEndColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_gradient_end_color, Color.TRANSPARENT);\n");
        template.append("        drawableInfo.gradientType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_solid_gradient, 0);\n");
        template.append("        drawableInfo.gradientOrientation = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_gradient_orientation, 0);\n");
        template.append("        drawableInfo.cornerType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_corner_type, 0);\n");
        template.append("        drawableInfo.shadowRadius = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shadow_radius, 0f);\n");
        template.append("\n");
        template.append("        drawableInfo.shadowColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_shadow_color, 0);\n");
        template.append("        drawableInfo.shadowDx = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shadow_dx, 0f);\n");
        template.append("        drawableInfo.shadowDy = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shadow_dy, 0f);\n");
        template.append("\n");
        template.append("        drawableInfo.blurRadius = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_blur_radius, 0f);\n");
        template.append("        drawableInfo.blurColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_blur_color, 0);\n");
        template.append("        drawableInfo.blurType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_blur_type, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.normalDrawable = arr.getDrawable(R.styleable.XViewTemplate_XViewTemplate_drawable);\n");
        template.append("\n");
        template.append("        drawableInfo.strokeGradientStartColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stroke_gradient_start_color, 0);\n");
        template.append("        drawableInfo.strokeGradientEndColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stroke_gradient_end_color, 0);\n");
        template.append("        drawableInfo.strokeGradientMiddleColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stroke_gradient_middle_color, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.strokeGradientOffsetX = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stroke_gradient_offset_x, 0f);\n");
        template.append("        drawableInfo.strokeGradientOffsetX1 = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stroke_gradient_offset_x1, 0f);\n");
        template.append("        drawableInfo.strokeGradientOffsetY = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stroke_gradient_offset_y, 0f);\n");
        template.append("        drawableInfo.strokeGradientOffsetY1 = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stroke_gradient_offset_y1, 0f);\n");
        template.append("\n");
        template.append("        drawableInfo.textColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_text_color, 0);\n");
        template.append("        drawableInfo.colorFilter = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_color_filter, -1);\n");
        template.append("\n");
        template.append("        drawableInfo.shaped = arr.getBoolean(R.styleable.XViewTemplate_XViewTemplate_shaped, false);\n");
        template.append("        drawableInfo.shapedTopLeftType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_shaped_topLeftCornerType, 0);\n");
        template.append("        drawableInfo.shapedTopLeftSize = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shaped_topLeftSize, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.shapedTopRightType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_shaped_topRightCornerType, 0);\n");
        template.append("        drawableInfo.shapedTopRightSize = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shaped_topRightSize, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.shapedBottomLeftType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_shaped_bottomLeftCornerType, 0);\n");
        template.append("        drawableInfo.shapedBottomLeftSize = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shaped_bottomLeftSize, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.shapedBottomRightType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_shaped_bottomRightCornerType, 0);\n");
        template.append("        drawableInfo.shapedBottomRightSize = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shaped_bottomRightSize, 0);\n");
        template.append("        return drawableInfo;\n");
        template.append("    }\n");
        template.append("\n");
        template.append("    public DrawableInfo fromStatedTypeArray(TypedArray arr) {\n");
        template.append("        DrawableInfo drawableInfo = new DrawableInfo();\n");
        template.append("\n");
        template.append("        // 填充色\n");
        template.append("        drawableInfo.solidColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_solid_color, Color.TRANSPARENT);\n");
        template.append("        // 角度\n");
        template.append("        drawableInfo.corner = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_corner, 0F);\n");
        template.append("        // 描边的宽度\n");
        template.append("        drawableInfo.strokeBorderWith = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_border, 0F);\n");
        template.append("        // 描边颜色\n");
        template.append("        drawableInfo.strokeBorderColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_color, Color.TRANSPARENT);\n");
        template.append("        // 渐变填充的角度\n");
        template.append("        drawableInfo.gradientRadius = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_gradient_radius, 0F);\n");
        template.append("        // 渐变开始颜色\n");
        template.append("        drawableInfo.gradientStartColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_gradient_start_color, Color.TRANSPARENT);\n");
        template.append("        drawableInfo.gradientCenterColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_gradient_center_color, Color.TRANSPARENT);\n");
        template.append("        drawableInfo.gradientEndColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_gradient_end_color, Color.TRANSPARENT);\n");
        template.append("        drawableInfo.gradientType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_stated_solid_gradient, 0);\n");
        template.append("        drawableInfo.gradientOrientation = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_stated_gradient_orientation, 0);\n");
        template.append("        drawableInfo.cornerType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_stated_corner_type, 0);\n");
        template.append("        drawableInfo.shadowRadius = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_shadow_radius, 0f);\n");
        template.append("\n");
        template.append("        drawableInfo. shadowColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_shadow_color, 0);\n");
        template.append("        drawableInfo.shadowDx = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_shadow_dx, 0f);\n");
        template.append("        drawableInfo.shadowDy = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_shadow_dy, 0f);\n");
        template.append("\n");
        template.append("        drawableInfo.blurRadius = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_blur_radius, 0f);\n");
        template.append("        drawableInfo.blurColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_blur_color, 0);\n");
        template.append("        drawableInfo.blurType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_stated_blur_type, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.normalDrawable = arr.getDrawable(R.styleable.XViewTemplate_XViewTemplate_stated_drawable);\n");
        template.append("\n");
        template.append("        drawableInfo.strokeGradientStartColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_gradient_start_color, 0);\n");
        template.append("        drawableInfo.strokeGradientEndColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_gradient_end_color, 0);\n");
        template.append("        drawableInfo.strokeGradientMiddleColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_gradient_middle_color, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.strokeGradientOffsetX = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_gradient_offset_x, 0f);\n");
        template.append("        drawableInfo.strokeGradientOffsetX1 = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_gradient_offset_x1, 0f);\n");
        template.append("        drawableInfo.strokeGradientOffsetY = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_gradient_offset_y, 0f);\n");
        template.append("        drawableInfo.strokeGradientOffsetY1 = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_stated_stroke_gradient_offset_y1, 0f);\n");
        template.append("\n");
        template.append("        drawableInfo.textColor = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_text_color, 0);\n");
        template.append("        drawableInfo.colorFilter = arr.getColor(R.styleable.XViewTemplate_XViewTemplate_stated_color_filter, -1);\n");
        template.append("\n");
        template.append("        drawableInfo.shaped = arr.getBoolean(R.styleable.XViewTemplate_XViewTemplate_shaped, false);\n");
        template.append("        drawableInfo.shapedTopLeftType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_shaped_topLeftCornerType, 0);\n");
        template.append("        drawableInfo.shapedTopLeftSize = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shaped_topLeftSize, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.shapedTopRightType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_shaped_topRightCornerType, 0);\n");
        template.append("        drawableInfo.shapedTopRightSize = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shaped_topRightSize, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.shapedBottomLeftType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_shaped_bottomLeftCornerType, 0);\n");
        template.append("        drawableInfo.shapedBottomLeftSize = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shaped_bottomLeftSize, 0);\n");
        template.append("\n");
        template.append("        drawableInfo.shapedBottomRightType = arr.getInt(R.styleable.XViewTemplate_XViewTemplate_shaped_bottomRightCornerType, 0);\n");
        template.append("        drawableInfo.shapedBottomRightSize = arr.getDimension(R.styleable.XViewTemplate_XViewTemplate_shaped_bottomRightSize, 0);\n");
        template.append("        return drawableInfo;\n");
        template.append("    }\n");
        template.append("}\n");
    }
}
